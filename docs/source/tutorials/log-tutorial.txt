.. _logstash-tutorial:

######################################
Generating Alerts from Logstash Output
######################################

Suppose we want to surface a Snort alert in Cyphon::

    May 16 13:00:15 whimsy snort[3115]: [1:469:1] ICMP PING NMAP [Classification: Attempted Information Leak] [Priority: 2]: <eth1> {ICMP} 10.120.66.1:0 -> 10.22.33.106:0

We could either use Cyphon to parse and process the message through a LogChute, or we could use Logstash to parse the message and send directly it to Cyphon's Watchdogs. In this tutorial, we'll use the Logstash shortcut. We'll only cover the main aspects of the Logstash configuration, but you can see a full example on Cyphondock.


********************
1. Create Data Model
********************

We want the parsed message to look like this::

    {
        "sys_timestamp": "2017-05-16T13:00:15.000Z",
        "host": "whimsy",
        "generator_id": 1,
        "signature_id": 469,
        "signature": "ICMP PING NMAP",
        "classification": "Attempted Information Leak",
        "priority": "2",
        "protocol": "ICMP",
        "source_ip": 10.120.66.1,
        "source_port": "0",
        "destination_ip": "10.22.33.106",
        "destination_port": "0"
    }

We'll make a home for document by designing a Container for it and a specifying a Collection in which to store it. We'll come back to that a little later... First, let's get the data to Logstash!


*********************
2. Configure Filebeat
*********************

You can use Filebeat to send your Snort logs to Logstash. Consult the official documentation for full details.

Prospector
==========

First, set up a Filebeat prospector to label your Snort log messages as "snort," so we can easily identify them::

    filebeat.prospectors:

    - input_type: log
      paths:
        - /var/log/snort/*.log
      document_type: snort

Output
======

Next, specify an output to send the logs to Logstash, for example::

    output.logstash:
      hosts: ["localhost:5044"]


*********************
3. Configure Logstash
*********************

Once Filebeat is setup, we can configure Logstash to receive the logs.

Input
=====

First, we'll create a Logstash input for Filebeat::

    input {
        beats {
            port => 5044
        }
    }

Filters
=======

Next, we'll construct a couple of Logstash filters to process the message.

Add Snort-related fields
------------------------

The first filter will:

    1) Identify Snort messages
    2) Parse the messages into individual fields
    3) Translate the timestamp into a datetime that can be indexed

.. code::

    filter {

        if [type] == "snort" {

            # parse the message into individual fields
            grok {
                match => { "message" => "(?<ts>.*\d{2}:\d{2}:\d{2})\s(?<host>.*?)\s.*?\s\[(?<generator_id>.*?)::(?<signature_id>.*?):.*?\]\s(?<signature>.*?)\s\[Classification:\s(?<classification>.*?)\]\s\[Priority:\s(?<priority>.*?)\]:.*?\{(?<protocol>.*?)\}\s(?<source_ip>.*?):(?<source_port>.*?)\s-\>\s(?<destination_ip>.*?):(?<destination_port>.*)" }
            }

            # remove the original message if parsing was successful
            if !("_grokparsefailure" in [tags]) {
                mutate {
                    remove_field => [ "message" ]
                }
            }

            # parse the timestamp and save in a new datetime field
            if [ts] {
                date {
                    match => [ "ts", "MMM dd HH:mm:ss" ]
                    target => "sys_timestamp"
                }

                # remove the original timestamp if date parsing was successful
                if !("_dateparsefailure" in [tags]) {
                    mutate {
                        remove_field => [ "ts" ]
                    }
                }
            }
        }
    }

Add Cyphon-related fields
-------------------------

The second filter will add fields that will help Cyphon locate the data:

    1) Add a universally unique identifier (uuid) to the document
    2) Add a reference to the index where the document will be saved

.. code::

    filter {

        uuid {
            target => "@uuid"
        }

        mutate {
            add_field => {
                "collection" => "elasticsearch.cyphon.%{type}"
            }
        }
    }


Output
======

Finally, we need to tell Logstash what to do with the parsed messages. 
Our Logstash output configuration will:

    1) Save the message in a time-stamped Elasticsearch index
    2) Use the @uuid field as the Elasticsearch document id
    3) Send a copy of the message to Cyphon for inspection by Watchdogs

.. code::

    output {

        # save events to Elasticsearch with the uuid as the document id
        elasticsearch {
            hosts => ["elasticsearch"]
            index => "cyphon-%{+YYYY-MM-dd}"
            document_id => "%{@uuid}"
        }

        # send Snort messages to Cyphon Watchdogs via RabbitMQ
        if [type] == "snort" {
            rabbitmq {
                host => "rabbit"
                port => 5672
                exchange => "cyphon"
                exchange_type => "direct"
                key => "watchdogs"
                user => "guest"
                password => "guest"
                vhost => "cyphon"
                durable => true
                persistent => true
            }
        }
    }


*******************
4. Configure Cyphon
*******************

Although we're using Logstash to parse and store our logs, we need to let Cyphon know a bit about what's happening.

Create a Container
==================

We can tell it what fields of the document are important to us by creating a Container for those fields.

We're not performing any extra analyses on the document, so we don't need a Label for the Container, just a Bottle.

Let's revisit our parsed document::

    {
        "sys_timestamp": "2017-05-16T13:00:15.000Z",
        "host": "whimsy",
        "generator_id": 1,
        "signature_id": 469,
        "signature": "ICMP PING NMAP",
        "classification": "Attempted Information Leak",
        "priority": "2",
        "protocol": "ICMP",
        "source_ip": 10.120.66.1,
        "source_port": "0",
        "destination_ip": "10.22.33.106",
        "destination_port": "0"
    }

To make a Container for this document, we'll create a Bottle with the following BottleFields:

    ================  =====================
    Field Name        Field Type
    ================  =====================
    sys_timestamp     DateTimeField
    host              CharField
    generator_id      CharField
    signature_id      CharField
    signature         CharField
    classification    CharField
    priority          CharField
    protocol          CharField
    source_ip         GenericIPAddressField
    source_port       CharField
    destination_ip    GenericIPAddressField
    destination_port  CharField
    ================  =====================   

.. note:

    If you're wondering why we're storing ports and other numbers as CharFields instead of IntegerFields, it's because numeric fields are usually reserved for values which have mathematical meaning (can be added, multiplied, etc.).


Create a Distillery
===================

- Warehouse
- Collection


Create a Watchdog
=================


Start Receiver
==============


