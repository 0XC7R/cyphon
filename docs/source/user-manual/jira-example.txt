.. _jira-example:

##################
JIRA Oauth Example
##################

.. code-block:: python
    :linenos:

    """
    Example CLI code for getting an access token from JIRA.
    """

    # standard library
    import base64
    import urllib

    # third party
    import oauth2 as oauth
    from tlslite.utils import keyfactory


    # Replace with the path to your RSA .pem file
    RSA_PEM_FILEPATH = '../rsa.pem'

    # Replace with your own consumer key and secret
    CONSUMER_KEY = 'oauth-sample-consumer'
    CONSUMER_SECRET = 'dont_care'

    # Replace with the URL for your JIRA instance (include the end slash!)
    JIRA_URL = 'http://localhost:8090/jira/'

    # Replace with the ID of a new issue you can use for testing
    NEW_ISSUE = 'BULK-1'

    REQUEST_TOKEN_URL = JIRA_URL + '%s/plugins/servlet/oauth/request-token'
    ACCESS_TOKEN_URL = JIRA_URL + 'plugins/servlet/oauth/access-token'
    AUTHORIZE_URL = JIRA_URL + 'plugins/servlet/oauth/authorize'
    DATA_URL = JIRA_URL + 'rest/api/2/issue/' + NEW_ISSUE


    class SignatureMethod_RSA_SHA1(oauth.SignatureMethod):
        name = 'RSA-SHA1'

        def signing_base(self, request, consumer, token):
            if not hasattr(request, 'normalized_url') \
                    or request.normalized_url is None:
                raise ValueError("Base URL for request is not set.")

            sig = (
                oauth.escape(request.method),
                oauth.escape(request.normalized_url),
                oauth.escape(request.get_normalized_parameters()),
            )

            key = '%s&' % oauth.escape(consumer.secret)
            if token:
                key += oauth.escape(token.secret)
            raw = '&'.join(sig)
            return key, raw

        def sign(self, request, consumer, token):
            """Build the base signature string."""
            key, raw = self.signing_base(request, consumer, token)

            with open(RSA_PEM_FILEPATH, 'r') as rsa_file:
                data = rsa_file.read()

            private_key_string = data.strip()

            private_key = keyfactory.parsePrivateKey(private_key_string)
            signature = private_key.hashAndSign(raw)

            return base64.b64encode(signature)


    consumer = oauth.Consumer(CONSUMER_KEY, CONSUMER_SECRET)
    client = oauth.Client(consumer)

    # Let's try to access a JIRA issue (NEW_ISSUE). We should get a 401.
    resp, content = client.request(DATA_URL, "GET")
    if resp['status'] != '401':
        raise Exception("Should have no access!")

    consumer = oauth.Consumer(CONSUMER_KEY, CONSUMER_SECRET)
    client = oauth.Client(consumer)
    client.set_signature_method(SignatureMethod_RSA_SHA1())


    # Step 1: Get a request token. This is a temporary token that is used for
    # having the user authorize an access token and to sign the request to obtain
    # said access token.

    resp, content = client.request(REQUEST_TOKEN_URL, "POST")
    if resp['status'] != '200':
        raise Exception("Invalid response %s: %s" % (resp['status'], content))

    request_token = dict(urllib.parse.parse_qsl(content))

    oauth_token = request_token[b'oauth_token']
    oauth_token_secret = request_token[b'oauth_token_secret']

    print("Request Token:", request_token)
    print("    - oauth_token        = %s" % oauth_token.decode('utf-8'))
    print("    - oauth_token_secret = %s" % oauth_token_secret.decode('utf-8'))
    print(resp, content)


    # Step 2: Redirect to the provider. Since this is a CLI script we do not
    # redirect. In a web application you would redirect the user to the URL
    # below.

    print("Go to the following link in your browser:")
    print("%s?oauth_token=%s" % (AUTHORIZE_URL, oauth_token.decode('utf-8')))
    print()

    # After the user has granted access to you, the consumer, the provider will
    # redirect you to whatever URL you have told them to redirect to. You can
    # usually define this in the oauth_callback argument as well.
    accepted = 'n'
    while accepted.lower() == 'n':
        accepted = input('Have you authorized me? (y/n) ')
    oauth_verifier = input('What is the PIN? ')


    # Step 3: Once the consumer has redirected the user back to the oauth_callback
    # URL, you can request the access token the user has approved. You use the
    # request token to sign this request. After this is done, you throw away the
    # request token and use the access token returned. You should store this
    # access token somewhere safe, like a database, for future use.
    token = oauth.Token(request_token[b'oauth_token'].decode('utf-8'),
                        request_token[b'oauth_token_secret'].decode('utf-8'))
    token.set_verifier(oauth_verifier)

    client = oauth.Client(consumer, token)
    client.set_signature_method(SignatureMethod_RSA_SHA1())

    resp, content = client.request(ACCESS_TOKEN_URL, "POST")
    access_token = dict(urllib.parse.parse_qsl(content))

    oauth_token = access_token[b'oauth_token']
    oauth_token_secret = access_token[b'oauth_token_secret']

    print("Access Token:", access_token)
    print("    - oauth_token        = %s" % oauth_token.decode('utf-8'))
    print("    - oauth_token_secret = %s" % oauth_token_secret.decode('utf-8'))
    print()
    print("You may now access protected resources using the access tokens above.")
    print(resp, content)

    # Now let's try to access the same issue again with the access token.
    # We should get a 200!
    token = oauth.Token(oauth_token, oauth_token_secret)
    client = oauth.Client(consumer, token)
    client.set_signature_method(SignatureMethod_RSA_SHA1())

    resp, content = client.request(DATA_URL, "GET")
    if resp['status'] != '200':
        raise Exception("Should have access!")

